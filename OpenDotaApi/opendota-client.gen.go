// Package opendotaapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.2 DO NOT EDIT.
package opendotaapi

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBenchmarks request
	GetBenchmarks(ctx context.Context, params *GetBenchmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConstants request
	GetConstants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConstantsByResource request
	GetConstantsByResource(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDistributions request
	GetDistributions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetExplorer request
	GetExplorer(ctx context.Context, params *GetExplorerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFindMatches request
	GetFindMatches(ctx context.Context, params *GetFindMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeroStats request
	GetHeroStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeroes request
	GetHeroes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeroesByHeroIdSelectDurations request
	GetHeroesByHeroIdSelectDurations(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeroesByHeroIdSelectItemPopularity request
	GetHeroesByHeroIdSelectItemPopularity(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeroesByHeroIdSelectMatches request
	GetHeroesByHeroIdSelectMatches(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeroesByHeroIdSelectMatchups request
	GetHeroesByHeroIdSelectMatchups(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHeroesByHeroIdSelectPlayers request
	GetHeroesByHeroIdSelectPlayers(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeagues request
	GetLeagues(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeaguesByLeagueId request
	GetLeaguesByLeagueId(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeaguesByLeagueIdSelectMatches request
	GetLeaguesByLeagueIdSelectMatches(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeaguesByLeagueIdSelectTeams request
	GetLeaguesByLeagueIdSelectTeams(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLive request
	GetLive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMatchesByMatchId request
	GetMatchesByMatchId(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetadata request
	GetMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetParsedMatches request
	GetParsedMatches(ctx context.Context, params *GetParsedMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountId request
	GetPlayersByAccountId(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectCounts request
	GetPlayersByAccountIdSelectCounts(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectHeroes request
	GetPlayersByAccountIdSelectHeroes(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectHeroesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdHistogramsByField request
	GetPlayersByAccountIdHistogramsByField(ctx context.Context, accountId AccountIdParam, field FieldParam, params *GetPlayersByAccountIdHistogramsByFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectMatches request
	GetPlayersByAccountIdSelectMatches(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectPeers request
	GetPlayersByAccountIdSelectPeers(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectPeersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectPros request
	GetPlayersByAccountIdSelectPros(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectProsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectRankings request
	GetPlayersByAccountIdSelectRankings(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectRatings request
	GetPlayersByAccountIdSelectRatings(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectRecentMatches request
	GetPlayersByAccountIdSelectRecentMatches(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPlayersAccountIdRefresh request
	PostPlayersAccountIdRefresh(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectTotals request
	GetPlayersByAccountIdSelectTotals(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectTotalsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectWardmap request
	GetPlayersByAccountIdSelectWardmap(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWardmapParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectWl request
	GetPlayersByAccountIdSelectWl(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWlParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByAccountIdSelectWordcloud request
	GetPlayersByAccountIdSelectWordcloud(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWordcloudParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayersByRank request
	GetPlayersByRank(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProMatches request
	GetProMatches(ctx context.Context, params *GetProMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProPlayers request
	GetProPlayers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublicMatches request
	GetPublicMatches(ctx context.Context, params *GetPublicMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankings request
	GetRankings(ctx context.Context, params *GetRankingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecordsByField request
	GetRecordsByField(ctx context.Context, field string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReplays request
	GetReplays(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestByJobId request
	GetRequestByJobId(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRequestMatchId request
	PostRequestMatchId(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScenariosItemTimings request
	GetScenariosItemTimings(ctx context.Context, params *GetScenariosItemTimingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScenariosLaneRoles request
	GetScenariosLaneRoles(ctx context.Context, params *GetScenariosLaneRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScenariosMisc request
	GetScenariosMisc(ctx context.Context, params *GetScenariosMiscParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema request
	GetSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearch request
	GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeams request
	GetTeams(ctx context.Context, params *GetTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsByTeamId request
	GetTeamsByTeamId(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsByTeamIdSelectHeroes request
	GetTeamsByTeamIdSelectHeroes(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsByTeamIdSelectMatches request
	GetTeamsByTeamIdSelectMatches(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamsByTeamIdSelectPlayers request
	GetTeamsByTeamIdSelectPlayers(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBenchmarks(ctx context.Context, params *GetBenchmarksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBenchmarksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConstants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConstantsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConstantsByResource(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConstantsByResourceRequest(c.Server, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDistributions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDistributionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetExplorer(ctx context.Context, params *GetExplorerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetExplorerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFindMatches(ctx context.Context, params *GetFindMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFindMatchesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeroStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeroStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeroes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeroesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeroesByHeroIdSelectDurations(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeroesByHeroIdSelectDurationsRequest(c.Server, heroId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeroesByHeroIdSelectItemPopularity(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeroesByHeroIdSelectItemPopularityRequest(c.Server, heroId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeroesByHeroIdSelectMatches(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeroesByHeroIdSelectMatchesRequest(c.Server, heroId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeroesByHeroIdSelectMatchups(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeroesByHeroIdSelectMatchupsRequest(c.Server, heroId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHeroesByHeroIdSelectPlayers(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHeroesByHeroIdSelectPlayersRequest(c.Server, heroId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeagues(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeaguesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeaguesByLeagueId(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeaguesByLeagueIdRequest(c.Server, leagueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeaguesByLeagueIdSelectMatches(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeaguesByLeagueIdSelectMatchesRequest(c.Server, leagueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeaguesByLeagueIdSelectTeams(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeaguesByLeagueIdSelectTeamsRequest(c.Server, leagueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMatchesByMatchId(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMatchesByMatchIdRequest(c.Server, matchId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetadata(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetadataRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetParsedMatches(ctx context.Context, params *GetParsedMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetParsedMatchesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountId(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectCounts(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectCountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectCountsRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectHeroes(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectHeroesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectHeroesRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdHistogramsByField(ctx context.Context, accountId AccountIdParam, field FieldParam, params *GetPlayersByAccountIdHistogramsByFieldParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdHistogramsByFieldRequest(c.Server, accountId, field, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectMatches(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectMatchesRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectPeers(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectPeersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectPeersRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectPros(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectProsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectProsRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectRankings(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectRankingsRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectRatings(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectRatingsRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectRecentMatches(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectRecentMatchesRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlayersAccountIdRefresh(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlayersAccountIdRefreshRequest(c.Server, accountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectTotals(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectTotalsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectTotalsRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectWardmap(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWardmapParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectWardmapRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectWl(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWlParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectWlRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByAccountIdSelectWordcloud(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWordcloudParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByAccountIdSelectWordcloudRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayersByRank(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayersByRankRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProMatches(ctx context.Context, params *GetProMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProMatchesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProPlayers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProPlayersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicMatches(ctx context.Context, params *GetPublicMatchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublicMatchesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankings(ctx context.Context, params *GetRankingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecordsByField(ctx context.Context, field string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecordsByFieldRequest(c.Server, field)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReplays(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReplaysRequest(c.Server, matchId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequestByJobId(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestByJobIdRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRequestMatchId(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequestMatchIdRequest(c.Server, matchId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScenariosItemTimings(ctx context.Context, params *GetScenariosItemTimingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScenariosItemTimingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScenariosLaneRoles(ctx context.Context, params *GetScenariosLaneRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScenariosLaneRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScenariosMisc(ctx context.Context, params *GetScenariosMiscParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScenariosMiscRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeams(ctx context.Context, params *GetTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsByTeamId(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsByTeamIdRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsByTeamIdSelectHeroes(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsByTeamIdSelectHeroesRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsByTeamIdSelectMatches(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsByTeamIdSelectMatchesRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamsByTeamIdSelectPlayers(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsByTeamIdSelectPlayersRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBenchmarksRequest generates requests for GetBenchmarks
func NewGetBenchmarksRequest(server string, params *GetBenchmarksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/benchmarks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, params.HeroId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConstantsRequest generates requests for GetConstants
func NewGetConstantsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/constants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConstantsByResourceRequest generates requests for GetConstantsByResource
func NewGetConstantsByResourceRequest(server string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/constants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDistributionsRequest generates requests for GetDistributions
func NewGetDistributionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/distributions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExplorerRequest generates requests for GetExplorer
func NewGetExplorerRequest(server string, params *GetExplorerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/explorer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Sql != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sql", runtime.ParamLocationQuery, *params.Sql); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFindMatchesRequest generates requests for GetFindMatches
func NewGetFindMatchesRequest(server string, params *GetFindMatchesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/findMatches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TeamA != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "teamA", runtime.ParamLocationQuery, *params.TeamA); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TeamB != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "teamB", runtime.ParamLocationQuery, *params.TeamB); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeroStatsRequest generates requests for GetHeroStats
func NewGetHeroStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/heroStats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeroesRequest generates requests for GetHeroes
func NewGetHeroesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/heroes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeroesByHeroIdSelectDurationsRequest generates requests for GetHeroesByHeroIdSelectDurations
func NewGetHeroesByHeroIdSelectDurationsRequest(server string, heroId HeroIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hero_id", runtime.ParamLocationPath, heroId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/heroes/%s/durations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeroesByHeroIdSelectItemPopularityRequest generates requests for GetHeroesByHeroIdSelectItemPopularity
func NewGetHeroesByHeroIdSelectItemPopularityRequest(server string, heroId HeroIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hero_id", runtime.ParamLocationPath, heroId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/heroes/%s/itemPopularity", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeroesByHeroIdSelectMatchesRequest generates requests for GetHeroesByHeroIdSelectMatches
func NewGetHeroesByHeroIdSelectMatchesRequest(server string, heroId HeroIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hero_id", runtime.ParamLocationPath, heroId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/heroes/%s/matches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeroesByHeroIdSelectMatchupsRequest generates requests for GetHeroesByHeroIdSelectMatchups
func NewGetHeroesByHeroIdSelectMatchupsRequest(server string, heroId HeroIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hero_id", runtime.ParamLocationPath, heroId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/heroes/%s/matchups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHeroesByHeroIdSelectPlayersRequest generates requests for GetHeroesByHeroIdSelectPlayers
func NewGetHeroesByHeroIdSelectPlayersRequest(server string, heroId HeroIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hero_id", runtime.ParamLocationPath, heroId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/heroes/%s/players", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLeaguesRequest generates requests for GetLeagues
func NewGetLeaguesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leagues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLeaguesByLeagueIdRequest generates requests for GetLeaguesByLeagueId
func NewGetLeaguesByLeagueIdRequest(server string, leagueId LeagueIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "league_id", runtime.ParamLocationPath, leagueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leagues/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLeaguesByLeagueIdSelectMatchesRequest generates requests for GetLeaguesByLeagueIdSelectMatches
func NewGetLeaguesByLeagueIdSelectMatchesRequest(server string, leagueId LeagueIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "league_id", runtime.ParamLocationPath, leagueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leagues/%s/matches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLeaguesByLeagueIdSelectTeamsRequest generates requests for GetLeaguesByLeagueIdSelectTeams
func NewGetLeaguesByLeagueIdSelectTeamsRequest(server string, leagueId LeagueIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "league_id", runtime.ParamLocationPath, leagueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leagues/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLiveRequest generates requests for GetLive
func NewGetLiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/live")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMatchesByMatchIdRequest generates requests for GetMatchesByMatchId
func NewGetMatchesByMatchIdRequest(server string, matchId MatchIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "match_id", runtime.ParamLocationPath, matchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/matches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetadataRequest generates requests for GetMetadata
func NewGetMetadataRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetParsedMatchesRequest generates requests for GetParsedMatches
func NewGetParsedMatchesRequest(server string, params *GetParsedMatchesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/parsedMatches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LessThanMatchId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "less_than_match_id", runtime.ParamLocationQuery, *params.LessThanMatchId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdRequest generates requests for GetPlayersByAccountId
func NewGetPlayersByAccountIdRequest(server string, accountId AccountIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectCountsRequest generates requests for GetPlayersByAccountIdSelectCounts
func NewGetPlayersByAccountIdSelectCountsRequest(server string, accountId AccountIdParam, params *GetPlayersByAccountIdSelectCountsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/counts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Win != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "win", runtime.ParamLocationQuery, *params.Win); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Patch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "patch", runtime.ParamLocationQuery, *params.Patch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_mode", runtime.ParamLocationQuery, *params.GameMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LobbyType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lobby_type", runtime.ParamLocationQuery, *params.LobbyType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LaneRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lane_role", runtime.ParamLocationQuery, *params.LaneRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRadiant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_radiant", runtime.ParamLocationQuery, *params.IsRadiant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "included_account_id", runtime.ParamLocationQuery, *params.IncludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excluded_account_id", runtime.ParamLocationQuery, *params.ExcludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_hero_id", runtime.ParamLocationQuery, *params.WithHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgainstHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "against_hero_id", runtime.ParamLocationQuery, *params.AgainstHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Significant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "significant", runtime.ParamLocationQuery, *params.Significant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Having != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "having", runtime.ParamLocationQuery, *params.Having); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectHeroesRequest generates requests for GetPlayersByAccountIdSelectHeroes
func NewGetPlayersByAccountIdSelectHeroesRequest(server string, accountId AccountIdParam, params *GetPlayersByAccountIdSelectHeroesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/heroes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Win != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "win", runtime.ParamLocationQuery, *params.Win); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Patch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "patch", runtime.ParamLocationQuery, *params.Patch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_mode", runtime.ParamLocationQuery, *params.GameMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LobbyType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lobby_type", runtime.ParamLocationQuery, *params.LobbyType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LaneRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lane_role", runtime.ParamLocationQuery, *params.LaneRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRadiant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_radiant", runtime.ParamLocationQuery, *params.IsRadiant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "included_account_id", runtime.ParamLocationQuery, *params.IncludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excluded_account_id", runtime.ParamLocationQuery, *params.ExcludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_hero_id", runtime.ParamLocationQuery, *params.WithHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgainstHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "against_hero_id", runtime.ParamLocationQuery, *params.AgainstHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Significant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "significant", runtime.ParamLocationQuery, *params.Significant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Having != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "having", runtime.ParamLocationQuery, *params.Having); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdHistogramsByFieldRequest generates requests for GetPlayersByAccountIdHistogramsByField
func NewGetPlayersByAccountIdHistogramsByFieldRequest(server string, accountId AccountIdParam, field FieldParam, params *GetPlayersByAccountIdHistogramsByFieldParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "field", runtime.ParamLocationPath, field)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/histograms/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Win != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "win", runtime.ParamLocationQuery, *params.Win); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Patch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "patch", runtime.ParamLocationQuery, *params.Patch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_mode", runtime.ParamLocationQuery, *params.GameMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LobbyType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lobby_type", runtime.ParamLocationQuery, *params.LobbyType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LaneRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lane_role", runtime.ParamLocationQuery, *params.LaneRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRadiant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_radiant", runtime.ParamLocationQuery, *params.IsRadiant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "included_account_id", runtime.ParamLocationQuery, *params.IncludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excluded_account_id", runtime.ParamLocationQuery, *params.ExcludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_hero_id", runtime.ParamLocationQuery, *params.WithHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgainstHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "against_hero_id", runtime.ParamLocationQuery, *params.AgainstHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Significant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "significant", runtime.ParamLocationQuery, *params.Significant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Having != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "having", runtime.ParamLocationQuery, *params.Having); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectMatchesRequest generates requests for GetPlayersByAccountIdSelectMatches
func NewGetPlayersByAccountIdSelectMatchesRequest(server string, accountId AccountIdParam, params *GetPlayersByAccountIdSelectMatchesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/matches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Win != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "win", runtime.ParamLocationQuery, *params.Win); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Patch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "patch", runtime.ParamLocationQuery, *params.Patch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_mode", runtime.ParamLocationQuery, *params.GameMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LobbyType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lobby_type", runtime.ParamLocationQuery, *params.LobbyType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LaneRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lane_role", runtime.ParamLocationQuery, *params.LaneRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRadiant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_radiant", runtime.ParamLocationQuery, *params.IsRadiant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "included_account_id", runtime.ParamLocationQuery, *params.IncludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excluded_account_id", runtime.ParamLocationQuery, *params.ExcludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_hero_id", runtime.ParamLocationQuery, *params.WithHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgainstHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "against_hero_id", runtime.ParamLocationQuery, *params.AgainstHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Significant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "significant", runtime.ParamLocationQuery, *params.Significant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Having != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "having", runtime.ParamLocationQuery, *params.Having); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Project != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectPeersRequest generates requests for GetPlayersByAccountIdSelectPeers
func NewGetPlayersByAccountIdSelectPeersRequest(server string, accountId AccountIdParam, params *GetPlayersByAccountIdSelectPeersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/peers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Win != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "win", runtime.ParamLocationQuery, *params.Win); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Patch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "patch", runtime.ParamLocationQuery, *params.Patch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_mode", runtime.ParamLocationQuery, *params.GameMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LobbyType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lobby_type", runtime.ParamLocationQuery, *params.LobbyType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LaneRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lane_role", runtime.ParamLocationQuery, *params.LaneRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRadiant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_radiant", runtime.ParamLocationQuery, *params.IsRadiant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "included_account_id", runtime.ParamLocationQuery, *params.IncludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excluded_account_id", runtime.ParamLocationQuery, *params.ExcludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_hero_id", runtime.ParamLocationQuery, *params.WithHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgainstHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "against_hero_id", runtime.ParamLocationQuery, *params.AgainstHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Significant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "significant", runtime.ParamLocationQuery, *params.Significant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Having != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "having", runtime.ParamLocationQuery, *params.Having); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectProsRequest generates requests for GetPlayersByAccountIdSelectPros
func NewGetPlayersByAccountIdSelectProsRequest(server string, accountId AccountIdParam, params *GetPlayersByAccountIdSelectProsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/pros", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Win != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "win", runtime.ParamLocationQuery, *params.Win); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Patch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "patch", runtime.ParamLocationQuery, *params.Patch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_mode", runtime.ParamLocationQuery, *params.GameMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LobbyType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lobby_type", runtime.ParamLocationQuery, *params.LobbyType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LaneRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lane_role", runtime.ParamLocationQuery, *params.LaneRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRadiant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_radiant", runtime.ParamLocationQuery, *params.IsRadiant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "included_account_id", runtime.ParamLocationQuery, *params.IncludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excluded_account_id", runtime.ParamLocationQuery, *params.ExcludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_hero_id", runtime.ParamLocationQuery, *params.WithHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgainstHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "against_hero_id", runtime.ParamLocationQuery, *params.AgainstHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Significant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "significant", runtime.ParamLocationQuery, *params.Significant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Having != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "having", runtime.ParamLocationQuery, *params.Having); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectRankingsRequest generates requests for GetPlayersByAccountIdSelectRankings
func NewGetPlayersByAccountIdSelectRankingsRequest(server string, accountId AccountIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/rankings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectRatingsRequest generates requests for GetPlayersByAccountIdSelectRatings
func NewGetPlayersByAccountIdSelectRatingsRequest(server string, accountId AccountIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/ratings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectRecentMatchesRequest generates requests for GetPlayersByAccountIdSelectRecentMatches
func NewGetPlayersByAccountIdSelectRecentMatchesRequest(server string, accountId AccountIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/recentMatches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPlayersAccountIdRefreshRequest generates requests for PostPlayersAccountIdRefresh
func NewPostPlayersAccountIdRefreshRequest(server string, accountId AccountIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/refresh", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectTotalsRequest generates requests for GetPlayersByAccountIdSelectTotals
func NewGetPlayersByAccountIdSelectTotalsRequest(server string, accountId AccountIdParam, params *GetPlayersByAccountIdSelectTotalsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/totals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Win != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "win", runtime.ParamLocationQuery, *params.Win); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Patch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "patch", runtime.ParamLocationQuery, *params.Patch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_mode", runtime.ParamLocationQuery, *params.GameMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LobbyType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lobby_type", runtime.ParamLocationQuery, *params.LobbyType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LaneRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lane_role", runtime.ParamLocationQuery, *params.LaneRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRadiant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_radiant", runtime.ParamLocationQuery, *params.IsRadiant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "included_account_id", runtime.ParamLocationQuery, *params.IncludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excluded_account_id", runtime.ParamLocationQuery, *params.ExcludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_hero_id", runtime.ParamLocationQuery, *params.WithHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgainstHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "against_hero_id", runtime.ParamLocationQuery, *params.AgainstHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Significant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "significant", runtime.ParamLocationQuery, *params.Significant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Having != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "having", runtime.ParamLocationQuery, *params.Having); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectWardmapRequest generates requests for GetPlayersByAccountIdSelectWardmap
func NewGetPlayersByAccountIdSelectWardmapRequest(server string, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWardmapParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/wardmap", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Win != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "win", runtime.ParamLocationQuery, *params.Win); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Patch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "patch", runtime.ParamLocationQuery, *params.Patch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_mode", runtime.ParamLocationQuery, *params.GameMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LobbyType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lobby_type", runtime.ParamLocationQuery, *params.LobbyType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LaneRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lane_role", runtime.ParamLocationQuery, *params.LaneRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRadiant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_radiant", runtime.ParamLocationQuery, *params.IsRadiant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "included_account_id", runtime.ParamLocationQuery, *params.IncludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excluded_account_id", runtime.ParamLocationQuery, *params.ExcludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_hero_id", runtime.ParamLocationQuery, *params.WithHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgainstHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "against_hero_id", runtime.ParamLocationQuery, *params.AgainstHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Significant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "significant", runtime.ParamLocationQuery, *params.Significant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Having != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "having", runtime.ParamLocationQuery, *params.Having); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectWlRequest generates requests for GetPlayersByAccountIdSelectWl
func NewGetPlayersByAccountIdSelectWlRequest(server string, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWlParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/wl", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Win != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "win", runtime.ParamLocationQuery, *params.Win); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Patch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "patch", runtime.ParamLocationQuery, *params.Patch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_mode", runtime.ParamLocationQuery, *params.GameMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LobbyType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lobby_type", runtime.ParamLocationQuery, *params.LobbyType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LaneRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lane_role", runtime.ParamLocationQuery, *params.LaneRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRadiant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_radiant", runtime.ParamLocationQuery, *params.IsRadiant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "included_account_id", runtime.ParamLocationQuery, *params.IncludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excluded_account_id", runtime.ParamLocationQuery, *params.ExcludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_hero_id", runtime.ParamLocationQuery, *params.WithHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgainstHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "against_hero_id", runtime.ParamLocationQuery, *params.AgainstHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Significant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "significant", runtime.ParamLocationQuery, *params.Significant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Having != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "having", runtime.ParamLocationQuery, *params.Having); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByAccountIdSelectWordcloudRequest generates requests for GetPlayersByAccountIdSelectWordcloud
func NewGetPlayersByAccountIdSelectWordcloudRequest(server string, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWordcloudParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/players/%s/wordcloud", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Win != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "win", runtime.ParamLocationQuery, *params.Win); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Patch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "patch", runtime.ParamLocationQuery, *params.Patch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GameMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_mode", runtime.ParamLocationQuery, *params.GameMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LobbyType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lobby_type", runtime.ParamLocationQuery, *params.LobbyType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Region != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "region", runtime.ParamLocationQuery, *params.Region); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LaneRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lane_role", runtime.ParamLocationQuery, *params.LaneRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsRadiant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_radiant", runtime.ParamLocationQuery, *params.IsRadiant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "included_account_id", runtime.ParamLocationQuery, *params.IncludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludedAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excluded_account_id", runtime.ParamLocationQuery, *params.ExcludedAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "with_hero_id", runtime.ParamLocationQuery, *params.WithHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AgainstHeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "against_hero_id", runtime.ParamLocationQuery, *params.AgainstHeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Significant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "significant", runtime.ParamLocationQuery, *params.Significant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Having != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "having", runtime.ParamLocationQuery, *params.Having); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlayersByRankRequest generates requests for GetPlayersByRank
func NewGetPlayersByRankRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/playersByRank")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProMatchesRequest generates requests for GetProMatches
func NewGetProMatchesRequest(server string, params *GetProMatchesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/proMatches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LessThanMatchId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "less_than_match_id", runtime.ParamLocationQuery, *params.LessThanMatchId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProPlayersRequest generates requests for GetProPlayers
func NewGetProPlayersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/proPlayers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicMatchesRequest generates requests for GetPublicMatches
func NewGetPublicMatchesRequest(server string, params *GetPublicMatchesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publicMatches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LessThanMatchId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "less_than_match_id", runtime.ParamLocationQuery, *params.LessThanMatchId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinRank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_rank", runtime.ParamLocationQuery, *params.MinRank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxRank != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_rank", runtime.ParamLocationQuery, *params.MaxRank); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MmrAscending != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mmr_ascending", runtime.ParamLocationQuery, *params.MmrAscending); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MmrDescending != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mmr_descending", runtime.ParamLocationQuery, *params.MmrDescending); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsRequest generates requests for GetRankings
func NewGetRankingsRequest(server string, params *GetRankingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, params.HeroId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecordsByFieldRequest generates requests for GetRecordsByField
func NewGetRecordsByFieldRequest(server string, field string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "field", runtime.ParamLocationPath, field)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/records/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReplaysRequest generates requests for GetReplays
func NewGetReplaysRequest(server string, matchId MatchIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "match_id", runtime.ParamLocationPath, matchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/replays/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequestByJobIdRequest generates requests for GetRequestByJobId
func NewGetRequestByJobIdRequest(server string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/request/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRequestMatchIdRequest generates requests for PostRequestMatchId
func NewPostRequestMatchIdRequest(server string, matchId MatchIdParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "match_id", runtime.ParamLocationPath, matchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/request/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScenariosItemTimingsRequest generates requests for GetScenariosItemTimings
func NewGetScenariosItemTimingsRequest(server string, params *GetScenariosItemTimingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scenarios/itemTimings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Item != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "item", runtime.ParamLocationQuery, *params.Item); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScenariosLaneRolesRequest generates requests for GetScenariosLaneRoles
func NewGetScenariosLaneRolesRequest(server string, params *GetScenariosLaneRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scenarios/laneRoles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LaneRole != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lane_role", runtime.ParamLocationQuery, *params.LaneRole); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HeroId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hero_id", runtime.ParamLocationQuery, *params.HeroId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScenariosMiscRequest generates requests for GetScenariosMisc
func NewGetScenariosMiscRequest(server string, params *GetScenariosMiscParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/scenarios/misc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scenario != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scenario", runtime.ParamLocationQuery, *params.Scenario); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchemaRequest generates requests for GetSchema
func NewGetSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchRequest generates requests for GetSearch
func NewGetSearchRequest(server string, params *GetSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsRequest generates requests for GetTeams
func NewGetTeamsRequest(server string, params *GetTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsByTeamIdRequest generates requests for GetTeamsByTeamId
func NewGetTeamsByTeamIdRequest(server string, teamId TeamIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsByTeamIdSelectHeroesRequest generates requests for GetTeamsByTeamIdSelectHeroes
func NewGetTeamsByTeamIdSelectHeroesRequest(server string, teamId TeamIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/heroes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsByTeamIdSelectMatchesRequest generates requests for GetTeamsByTeamIdSelectMatches
func NewGetTeamsByTeamIdSelectMatchesRequest(server string, teamId TeamIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/matches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsByTeamIdSelectPlayersRequest generates requests for GetTeamsByTeamIdSelectPlayers
func NewGetTeamsByTeamIdSelectPlayersRequest(server string, teamId TeamIdPathParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/players", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBenchmarksWithResponse request
	GetBenchmarksWithResponse(ctx context.Context, params *GetBenchmarksParams, reqEditors ...RequestEditorFn) (*GetBenchmarksResponse, error)

	// GetConstantsWithResponse request
	GetConstantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConstantsResponse, error)

	// GetConstantsByResourceWithResponse request
	GetConstantsByResourceWithResponse(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*GetConstantsByResourceResponse, error)

	// GetDistributionsWithResponse request
	GetDistributionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDistributionsResponse, error)

	// GetExplorerWithResponse request
	GetExplorerWithResponse(ctx context.Context, params *GetExplorerParams, reqEditors ...RequestEditorFn) (*GetExplorerResponse, error)

	// GetFindMatchesWithResponse request
	GetFindMatchesWithResponse(ctx context.Context, params *GetFindMatchesParams, reqEditors ...RequestEditorFn) (*GetFindMatchesResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// GetHeroStatsWithResponse request
	GetHeroStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHeroStatsResponse, error)

	// GetHeroesWithResponse request
	GetHeroesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHeroesResponse, error)

	// GetHeroesByHeroIdSelectDurationsWithResponse request
	GetHeroesByHeroIdSelectDurationsWithResponse(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*GetHeroesByHeroIdSelectDurationsResponse, error)

	// GetHeroesByHeroIdSelectItemPopularityWithResponse request
	GetHeroesByHeroIdSelectItemPopularityWithResponse(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*GetHeroesByHeroIdSelectItemPopularityResponse, error)

	// GetHeroesByHeroIdSelectMatchesWithResponse request
	GetHeroesByHeroIdSelectMatchesWithResponse(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*GetHeroesByHeroIdSelectMatchesResponse, error)

	// GetHeroesByHeroIdSelectMatchupsWithResponse request
	GetHeroesByHeroIdSelectMatchupsWithResponse(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*GetHeroesByHeroIdSelectMatchupsResponse, error)

	// GetHeroesByHeroIdSelectPlayersWithResponse request
	GetHeroesByHeroIdSelectPlayersWithResponse(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*GetHeroesByHeroIdSelectPlayersResponse, error)

	// GetLeaguesWithResponse request
	GetLeaguesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLeaguesResponse, error)

	// GetLeaguesByLeagueIdWithResponse request
	GetLeaguesByLeagueIdWithResponse(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*GetLeaguesByLeagueIdResponse, error)

	// GetLeaguesByLeagueIdSelectMatchesWithResponse request
	GetLeaguesByLeagueIdSelectMatchesWithResponse(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*GetLeaguesByLeagueIdSelectMatchesResponse, error)

	// GetLeaguesByLeagueIdSelectTeamsWithResponse request
	GetLeaguesByLeagueIdSelectTeamsWithResponse(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*GetLeaguesByLeagueIdSelectTeamsResponse, error)

	// GetLiveWithResponse request
	GetLiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLiveResponse, error)

	// GetMatchesByMatchIdWithResponse request
	GetMatchesByMatchIdWithResponse(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*GetMatchesByMatchIdResponse, error)

	// GetMetadataWithResponse request
	GetMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetadataResponse, error)

	// GetParsedMatchesWithResponse request
	GetParsedMatchesWithResponse(ctx context.Context, params *GetParsedMatchesParams, reqEditors ...RequestEditorFn) (*GetParsedMatchesResponse, error)

	// GetPlayersByAccountIdWithResponse request
	GetPlayersByAccountIdWithResponse(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdResponse, error)

	// GetPlayersByAccountIdSelectCountsWithResponse request
	GetPlayersByAccountIdSelectCountsWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectCountsParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectCountsResponse, error)

	// GetPlayersByAccountIdSelectHeroesWithResponse request
	GetPlayersByAccountIdSelectHeroesWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectHeroesParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectHeroesResponse, error)

	// GetPlayersByAccountIdHistogramsByFieldWithResponse request
	GetPlayersByAccountIdHistogramsByFieldWithResponse(ctx context.Context, accountId AccountIdParam, field FieldParam, params *GetPlayersByAccountIdHistogramsByFieldParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdHistogramsByFieldResponse, error)

	// GetPlayersByAccountIdSelectMatchesWithResponse request
	GetPlayersByAccountIdSelectMatchesWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectMatchesParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectMatchesResponse, error)

	// GetPlayersByAccountIdSelectPeersWithResponse request
	GetPlayersByAccountIdSelectPeersWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectPeersParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectPeersResponse, error)

	// GetPlayersByAccountIdSelectProsWithResponse request
	GetPlayersByAccountIdSelectProsWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectProsParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectProsResponse, error)

	// GetPlayersByAccountIdSelectRankingsWithResponse request
	GetPlayersByAccountIdSelectRankingsWithResponse(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectRankingsResponse, error)

	// GetPlayersByAccountIdSelectRatingsWithResponse request
	GetPlayersByAccountIdSelectRatingsWithResponse(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectRatingsResponse, error)

	// GetPlayersByAccountIdSelectRecentMatchesWithResponse request
	GetPlayersByAccountIdSelectRecentMatchesWithResponse(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectRecentMatchesResponse, error)

	// PostPlayersAccountIdRefreshWithResponse request
	PostPlayersAccountIdRefreshWithResponse(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*PostPlayersAccountIdRefreshResponse, error)

	// GetPlayersByAccountIdSelectTotalsWithResponse request
	GetPlayersByAccountIdSelectTotalsWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectTotalsParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectTotalsResponse, error)

	// GetPlayersByAccountIdSelectWardmapWithResponse request
	GetPlayersByAccountIdSelectWardmapWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWardmapParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectWardmapResponse, error)

	// GetPlayersByAccountIdSelectWlWithResponse request
	GetPlayersByAccountIdSelectWlWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWlParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectWlResponse, error)

	// GetPlayersByAccountIdSelectWordcloudWithResponse request
	GetPlayersByAccountIdSelectWordcloudWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWordcloudParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectWordcloudResponse, error)

	// GetPlayersByRankWithResponse request
	GetPlayersByRankWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlayersByRankResponse, error)

	// GetProMatchesWithResponse request
	GetProMatchesWithResponse(ctx context.Context, params *GetProMatchesParams, reqEditors ...RequestEditorFn) (*GetProMatchesResponse, error)

	// GetProPlayersWithResponse request
	GetProPlayersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProPlayersResponse, error)

	// GetPublicMatchesWithResponse request
	GetPublicMatchesWithResponse(ctx context.Context, params *GetPublicMatchesParams, reqEditors ...RequestEditorFn) (*GetPublicMatchesResponse, error)

	// GetRankingsWithResponse request
	GetRankingsWithResponse(ctx context.Context, params *GetRankingsParams, reqEditors ...RequestEditorFn) (*GetRankingsResponse, error)

	// GetRecordsByFieldWithResponse request
	GetRecordsByFieldWithResponse(ctx context.Context, field string, reqEditors ...RequestEditorFn) (*GetRecordsByFieldResponse, error)

	// GetReplaysWithResponse request
	GetReplaysWithResponse(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*GetReplaysResponse, error)

	// GetRequestByJobIdWithResponse request
	GetRequestByJobIdWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*GetRequestByJobIdResponse, error)

	// PostRequestMatchIdWithResponse request
	PostRequestMatchIdWithResponse(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*PostRequestMatchIdResponse, error)

	// GetScenariosItemTimingsWithResponse request
	GetScenariosItemTimingsWithResponse(ctx context.Context, params *GetScenariosItemTimingsParams, reqEditors ...RequestEditorFn) (*GetScenariosItemTimingsResponse, error)

	// GetScenariosLaneRolesWithResponse request
	GetScenariosLaneRolesWithResponse(ctx context.Context, params *GetScenariosLaneRolesParams, reqEditors ...RequestEditorFn) (*GetScenariosLaneRolesResponse, error)

	// GetScenariosMiscWithResponse request
	GetScenariosMiscWithResponse(ctx context.Context, params *GetScenariosMiscParams, reqEditors ...RequestEditorFn) (*GetScenariosMiscResponse, error)

	// GetSchemaWithResponse request
	GetSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSchemaResponse, error)

	// GetSearchWithResponse request
	GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error)

	// GetStatusWithResponse request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// GetTeamsWithResponse request
	GetTeamsWithResponse(ctx context.Context, params *GetTeamsParams, reqEditors ...RequestEditorFn) (*GetTeamsResponse, error)

	// GetTeamsByTeamIdWithResponse request
	GetTeamsByTeamIdWithResponse(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*GetTeamsByTeamIdResponse, error)

	// GetTeamsByTeamIdSelectHeroesWithResponse request
	GetTeamsByTeamIdSelectHeroesWithResponse(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*GetTeamsByTeamIdSelectHeroesResponse, error)

	// GetTeamsByTeamIdSelectMatchesWithResponse request
	GetTeamsByTeamIdSelectMatchesWithResponse(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*GetTeamsByTeamIdSelectMatchesResponse, error)

	// GetTeamsByTeamIdSelectPlayersWithResponse request
	GetTeamsByTeamIdSelectPlayersWithResponse(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*GetTeamsByTeamIdSelectPlayersResponse, error)
}

type GetBenchmarksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBenchmarksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBenchmarksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConstantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetConstantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConstantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConstantsByResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetConstantsByResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConstantsByResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDistributionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDistributionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDistributionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetExplorerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetExplorerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetExplorerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFindMatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFindMatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFindMatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeroStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHeroStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeroStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeroesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHeroesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeroesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeroesByHeroIdSelectDurationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHeroesByHeroIdSelectDurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeroesByHeroIdSelectDurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeroesByHeroIdSelectItemPopularityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHeroesByHeroIdSelectItemPopularityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeroesByHeroIdSelectItemPopularityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeroesByHeroIdSelectMatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHeroesByHeroIdSelectMatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeroesByHeroIdSelectMatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeroesByHeroIdSelectMatchupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHeroesByHeroIdSelectMatchupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeroesByHeroIdSelectMatchupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHeroesByHeroIdSelectPlayersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHeroesByHeroIdSelectPlayersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHeroesByHeroIdSelectPlayersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeaguesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLeaguesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeaguesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeaguesByLeagueIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLeaguesByLeagueIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeaguesByLeagueIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeaguesByLeagueIdSelectMatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLeaguesByLeagueIdSelectMatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeaguesByLeagueIdSelectMatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeaguesByLeagueIdSelectTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLeaguesByLeagueIdSelectTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeaguesByLeagueIdSelectTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetLiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMatchesByMatchIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMatchesByMatchIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMatchesByMatchIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetParsedMatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetParsedMatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetParsedMatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectCountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectCountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectCountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectHeroesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectHeroesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectHeroesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdHistogramsByFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdHistogramsByFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdHistogramsByFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectMatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectMatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectMatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectPeersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectPeersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectPeersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectProsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectProsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectProsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectRankingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectRankingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectRankingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectRatingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectRatingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectRatingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectRecentMatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectRecentMatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectRecentMatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPlayersAccountIdRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPlayersAccountIdRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPlayersAccountIdRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectTotalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectTotalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectTotalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectWardmapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectWardmapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectWardmapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectWlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectWlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectWlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByAccountIdSelectWordcloudResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByAccountIdSelectWordcloudResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByAccountIdSelectWordcloudResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayersByRankResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPlayersByRankResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayersByRankResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProMatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProMatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProMatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProPlayersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProPlayersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProPlayersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicMatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublicMatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicMatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRankingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecordsByFieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRecordsByFieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecordsByFieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReplaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetReplaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReplaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestByJobIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRequestByJobIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestByJobIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRequestMatchIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRequestMatchIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRequestMatchIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScenariosItemTimingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetScenariosItemTimingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScenariosItemTimingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScenariosLaneRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetScenariosLaneRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScenariosLaneRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScenariosMiscResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetScenariosMiscResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScenariosMiscResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsByTeamIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamsByTeamIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsByTeamIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsByTeamIdSelectHeroesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamsByTeamIdSelectHeroesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsByTeamIdSelectHeroesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsByTeamIdSelectMatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamsByTeamIdSelectMatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsByTeamIdSelectMatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsByTeamIdSelectPlayersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTeamsByTeamIdSelectPlayersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsByTeamIdSelectPlayersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBenchmarksWithResponse request returning *GetBenchmarksResponse
func (c *ClientWithResponses) GetBenchmarksWithResponse(ctx context.Context, params *GetBenchmarksParams, reqEditors ...RequestEditorFn) (*GetBenchmarksResponse, error) {
	rsp, err := c.GetBenchmarks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBenchmarksResponse(rsp)
}

// GetConstantsWithResponse request returning *GetConstantsResponse
func (c *ClientWithResponses) GetConstantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConstantsResponse, error) {
	rsp, err := c.GetConstants(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConstantsResponse(rsp)
}

// GetConstantsByResourceWithResponse request returning *GetConstantsByResourceResponse
func (c *ClientWithResponses) GetConstantsByResourceWithResponse(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*GetConstantsByResourceResponse, error) {
	rsp, err := c.GetConstantsByResource(ctx, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConstantsByResourceResponse(rsp)
}

// GetDistributionsWithResponse request returning *GetDistributionsResponse
func (c *ClientWithResponses) GetDistributionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDistributionsResponse, error) {
	rsp, err := c.GetDistributions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDistributionsResponse(rsp)
}

// GetExplorerWithResponse request returning *GetExplorerResponse
func (c *ClientWithResponses) GetExplorerWithResponse(ctx context.Context, params *GetExplorerParams, reqEditors ...RequestEditorFn) (*GetExplorerResponse, error) {
	rsp, err := c.GetExplorer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetExplorerResponse(rsp)
}

// GetFindMatchesWithResponse request returning *GetFindMatchesResponse
func (c *ClientWithResponses) GetFindMatchesWithResponse(ctx context.Context, params *GetFindMatchesParams, reqEditors ...RequestEditorFn) (*GetFindMatchesResponse, error) {
	rsp, err := c.GetFindMatches(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFindMatchesResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// GetHeroStatsWithResponse request returning *GetHeroStatsResponse
func (c *ClientWithResponses) GetHeroStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHeroStatsResponse, error) {
	rsp, err := c.GetHeroStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeroStatsResponse(rsp)
}

// GetHeroesWithResponse request returning *GetHeroesResponse
func (c *ClientWithResponses) GetHeroesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHeroesResponse, error) {
	rsp, err := c.GetHeroes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeroesResponse(rsp)
}

// GetHeroesByHeroIdSelectDurationsWithResponse request returning *GetHeroesByHeroIdSelectDurationsResponse
func (c *ClientWithResponses) GetHeroesByHeroIdSelectDurationsWithResponse(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*GetHeroesByHeroIdSelectDurationsResponse, error) {
	rsp, err := c.GetHeroesByHeroIdSelectDurations(ctx, heroId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeroesByHeroIdSelectDurationsResponse(rsp)
}

// GetHeroesByHeroIdSelectItemPopularityWithResponse request returning *GetHeroesByHeroIdSelectItemPopularityResponse
func (c *ClientWithResponses) GetHeroesByHeroIdSelectItemPopularityWithResponse(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*GetHeroesByHeroIdSelectItemPopularityResponse, error) {
	rsp, err := c.GetHeroesByHeroIdSelectItemPopularity(ctx, heroId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeroesByHeroIdSelectItemPopularityResponse(rsp)
}

// GetHeroesByHeroIdSelectMatchesWithResponse request returning *GetHeroesByHeroIdSelectMatchesResponse
func (c *ClientWithResponses) GetHeroesByHeroIdSelectMatchesWithResponse(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*GetHeroesByHeroIdSelectMatchesResponse, error) {
	rsp, err := c.GetHeroesByHeroIdSelectMatches(ctx, heroId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeroesByHeroIdSelectMatchesResponse(rsp)
}

// GetHeroesByHeroIdSelectMatchupsWithResponse request returning *GetHeroesByHeroIdSelectMatchupsResponse
func (c *ClientWithResponses) GetHeroesByHeroIdSelectMatchupsWithResponse(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*GetHeroesByHeroIdSelectMatchupsResponse, error) {
	rsp, err := c.GetHeroesByHeroIdSelectMatchups(ctx, heroId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeroesByHeroIdSelectMatchupsResponse(rsp)
}

// GetHeroesByHeroIdSelectPlayersWithResponse request returning *GetHeroesByHeroIdSelectPlayersResponse
func (c *ClientWithResponses) GetHeroesByHeroIdSelectPlayersWithResponse(ctx context.Context, heroId HeroIdPathParam, reqEditors ...RequestEditorFn) (*GetHeroesByHeroIdSelectPlayersResponse, error) {
	rsp, err := c.GetHeroesByHeroIdSelectPlayers(ctx, heroId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHeroesByHeroIdSelectPlayersResponse(rsp)
}

// GetLeaguesWithResponse request returning *GetLeaguesResponse
func (c *ClientWithResponses) GetLeaguesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLeaguesResponse, error) {
	rsp, err := c.GetLeagues(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeaguesResponse(rsp)
}

// GetLeaguesByLeagueIdWithResponse request returning *GetLeaguesByLeagueIdResponse
func (c *ClientWithResponses) GetLeaguesByLeagueIdWithResponse(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*GetLeaguesByLeagueIdResponse, error) {
	rsp, err := c.GetLeaguesByLeagueId(ctx, leagueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeaguesByLeagueIdResponse(rsp)
}

// GetLeaguesByLeagueIdSelectMatchesWithResponse request returning *GetLeaguesByLeagueIdSelectMatchesResponse
func (c *ClientWithResponses) GetLeaguesByLeagueIdSelectMatchesWithResponse(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*GetLeaguesByLeagueIdSelectMatchesResponse, error) {
	rsp, err := c.GetLeaguesByLeagueIdSelectMatches(ctx, leagueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeaguesByLeagueIdSelectMatchesResponse(rsp)
}

// GetLeaguesByLeagueIdSelectTeamsWithResponse request returning *GetLeaguesByLeagueIdSelectTeamsResponse
func (c *ClientWithResponses) GetLeaguesByLeagueIdSelectTeamsWithResponse(ctx context.Context, leagueId LeagueIdPathParam, reqEditors ...RequestEditorFn) (*GetLeaguesByLeagueIdSelectTeamsResponse, error) {
	rsp, err := c.GetLeaguesByLeagueIdSelectTeams(ctx, leagueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeaguesByLeagueIdSelectTeamsResponse(rsp)
}

// GetLiveWithResponse request returning *GetLiveResponse
func (c *ClientWithResponses) GetLiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLiveResponse, error) {
	rsp, err := c.GetLive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLiveResponse(rsp)
}

// GetMatchesByMatchIdWithResponse request returning *GetMatchesByMatchIdResponse
func (c *ClientWithResponses) GetMatchesByMatchIdWithResponse(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*GetMatchesByMatchIdResponse, error) {
	rsp, err := c.GetMatchesByMatchId(ctx, matchId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMatchesByMatchIdResponse(rsp)
}

// GetMetadataWithResponse request returning *GetMetadataResponse
func (c *ClientWithResponses) GetMetadataWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMetadataResponse, error) {
	rsp, err := c.GetMetadata(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetadataResponse(rsp)
}

// GetParsedMatchesWithResponse request returning *GetParsedMatchesResponse
func (c *ClientWithResponses) GetParsedMatchesWithResponse(ctx context.Context, params *GetParsedMatchesParams, reqEditors ...RequestEditorFn) (*GetParsedMatchesResponse, error) {
	rsp, err := c.GetParsedMatches(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetParsedMatchesResponse(rsp)
}

// GetPlayersByAccountIdWithResponse request returning *GetPlayersByAccountIdResponse
func (c *ClientWithResponses) GetPlayersByAccountIdWithResponse(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdResponse, error) {
	rsp, err := c.GetPlayersByAccountId(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdResponse(rsp)
}

// GetPlayersByAccountIdSelectCountsWithResponse request returning *GetPlayersByAccountIdSelectCountsResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectCountsWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectCountsParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectCountsResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectCounts(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectCountsResponse(rsp)
}

// GetPlayersByAccountIdSelectHeroesWithResponse request returning *GetPlayersByAccountIdSelectHeroesResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectHeroesWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectHeroesParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectHeroesResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectHeroes(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectHeroesResponse(rsp)
}

// GetPlayersByAccountIdHistogramsByFieldWithResponse request returning *GetPlayersByAccountIdHistogramsByFieldResponse
func (c *ClientWithResponses) GetPlayersByAccountIdHistogramsByFieldWithResponse(ctx context.Context, accountId AccountIdParam, field FieldParam, params *GetPlayersByAccountIdHistogramsByFieldParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdHistogramsByFieldResponse, error) {
	rsp, err := c.GetPlayersByAccountIdHistogramsByField(ctx, accountId, field, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdHistogramsByFieldResponse(rsp)
}

// GetPlayersByAccountIdSelectMatchesWithResponse request returning *GetPlayersByAccountIdSelectMatchesResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectMatchesWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectMatchesParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectMatchesResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectMatches(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectMatchesResponse(rsp)
}

// GetPlayersByAccountIdSelectPeersWithResponse request returning *GetPlayersByAccountIdSelectPeersResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectPeersWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectPeersParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectPeersResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectPeers(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectPeersResponse(rsp)
}

// GetPlayersByAccountIdSelectProsWithResponse request returning *GetPlayersByAccountIdSelectProsResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectProsWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectProsParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectProsResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectPros(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectProsResponse(rsp)
}

// GetPlayersByAccountIdSelectRankingsWithResponse request returning *GetPlayersByAccountIdSelectRankingsResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectRankingsWithResponse(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectRankingsResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectRankings(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectRankingsResponse(rsp)
}

// GetPlayersByAccountIdSelectRatingsWithResponse request returning *GetPlayersByAccountIdSelectRatingsResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectRatingsWithResponse(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectRatingsResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectRatings(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectRatingsResponse(rsp)
}

// GetPlayersByAccountIdSelectRecentMatchesWithResponse request returning *GetPlayersByAccountIdSelectRecentMatchesResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectRecentMatchesWithResponse(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectRecentMatchesResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectRecentMatches(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectRecentMatchesResponse(rsp)
}

// PostPlayersAccountIdRefreshWithResponse request returning *PostPlayersAccountIdRefreshResponse
func (c *ClientWithResponses) PostPlayersAccountIdRefreshWithResponse(ctx context.Context, accountId AccountIdParam, reqEditors ...RequestEditorFn) (*PostPlayersAccountIdRefreshResponse, error) {
	rsp, err := c.PostPlayersAccountIdRefresh(ctx, accountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlayersAccountIdRefreshResponse(rsp)
}

// GetPlayersByAccountIdSelectTotalsWithResponse request returning *GetPlayersByAccountIdSelectTotalsResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectTotalsWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectTotalsParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectTotalsResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectTotals(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectTotalsResponse(rsp)
}

// GetPlayersByAccountIdSelectWardmapWithResponse request returning *GetPlayersByAccountIdSelectWardmapResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectWardmapWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWardmapParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectWardmapResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectWardmap(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectWardmapResponse(rsp)
}

// GetPlayersByAccountIdSelectWlWithResponse request returning *GetPlayersByAccountIdSelectWlResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectWlWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWlParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectWlResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectWl(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectWlResponse(rsp)
}

// GetPlayersByAccountIdSelectWordcloudWithResponse request returning *GetPlayersByAccountIdSelectWordcloudResponse
func (c *ClientWithResponses) GetPlayersByAccountIdSelectWordcloudWithResponse(ctx context.Context, accountId AccountIdParam, params *GetPlayersByAccountIdSelectWordcloudParams, reqEditors ...RequestEditorFn) (*GetPlayersByAccountIdSelectWordcloudResponse, error) {
	rsp, err := c.GetPlayersByAccountIdSelectWordcloud(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByAccountIdSelectWordcloudResponse(rsp)
}

// GetPlayersByRankWithResponse request returning *GetPlayersByRankResponse
func (c *ClientWithResponses) GetPlayersByRankWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlayersByRankResponse, error) {
	rsp, err := c.GetPlayersByRank(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayersByRankResponse(rsp)
}

// GetProMatchesWithResponse request returning *GetProMatchesResponse
func (c *ClientWithResponses) GetProMatchesWithResponse(ctx context.Context, params *GetProMatchesParams, reqEditors ...RequestEditorFn) (*GetProMatchesResponse, error) {
	rsp, err := c.GetProMatches(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProMatchesResponse(rsp)
}

// GetProPlayersWithResponse request returning *GetProPlayersResponse
func (c *ClientWithResponses) GetProPlayersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProPlayersResponse, error) {
	rsp, err := c.GetProPlayers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProPlayersResponse(rsp)
}

// GetPublicMatchesWithResponse request returning *GetPublicMatchesResponse
func (c *ClientWithResponses) GetPublicMatchesWithResponse(ctx context.Context, params *GetPublicMatchesParams, reqEditors ...RequestEditorFn) (*GetPublicMatchesResponse, error) {
	rsp, err := c.GetPublicMatches(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicMatchesResponse(rsp)
}

// GetRankingsWithResponse request returning *GetRankingsResponse
func (c *ClientWithResponses) GetRankingsWithResponse(ctx context.Context, params *GetRankingsParams, reqEditors ...RequestEditorFn) (*GetRankingsResponse, error) {
	rsp, err := c.GetRankings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsResponse(rsp)
}

// GetRecordsByFieldWithResponse request returning *GetRecordsByFieldResponse
func (c *ClientWithResponses) GetRecordsByFieldWithResponse(ctx context.Context, field string, reqEditors ...RequestEditorFn) (*GetRecordsByFieldResponse, error) {
	rsp, err := c.GetRecordsByField(ctx, field, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecordsByFieldResponse(rsp)
}

// GetReplaysWithResponse request returning *GetReplaysResponse
func (c *ClientWithResponses) GetReplaysWithResponse(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*GetReplaysResponse, error) {
	rsp, err := c.GetReplays(ctx, matchId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReplaysResponse(rsp)
}

// GetRequestByJobIdWithResponse request returning *GetRequestByJobIdResponse
func (c *ClientWithResponses) GetRequestByJobIdWithResponse(ctx context.Context, jobId string, reqEditors ...RequestEditorFn) (*GetRequestByJobIdResponse, error) {
	rsp, err := c.GetRequestByJobId(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestByJobIdResponse(rsp)
}

// PostRequestMatchIdWithResponse request returning *PostRequestMatchIdResponse
func (c *ClientWithResponses) PostRequestMatchIdWithResponse(ctx context.Context, matchId MatchIdParam, reqEditors ...RequestEditorFn) (*PostRequestMatchIdResponse, error) {
	rsp, err := c.PostRequestMatchId(ctx, matchId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRequestMatchIdResponse(rsp)
}

// GetScenariosItemTimingsWithResponse request returning *GetScenariosItemTimingsResponse
func (c *ClientWithResponses) GetScenariosItemTimingsWithResponse(ctx context.Context, params *GetScenariosItemTimingsParams, reqEditors ...RequestEditorFn) (*GetScenariosItemTimingsResponse, error) {
	rsp, err := c.GetScenariosItemTimings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScenariosItemTimingsResponse(rsp)
}

// GetScenariosLaneRolesWithResponse request returning *GetScenariosLaneRolesResponse
func (c *ClientWithResponses) GetScenariosLaneRolesWithResponse(ctx context.Context, params *GetScenariosLaneRolesParams, reqEditors ...RequestEditorFn) (*GetScenariosLaneRolesResponse, error) {
	rsp, err := c.GetScenariosLaneRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScenariosLaneRolesResponse(rsp)
}

// GetScenariosMiscWithResponse request returning *GetScenariosMiscResponse
func (c *ClientWithResponses) GetScenariosMiscWithResponse(ctx context.Context, params *GetScenariosMiscParams, reqEditors ...RequestEditorFn) (*GetScenariosMiscResponse, error) {
	rsp, err := c.GetScenariosMisc(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScenariosMiscResponse(rsp)
}

// GetSchemaWithResponse request returning *GetSchemaResponse
func (c *ClientWithResponses) GetSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSchemaResponse, error) {
	rsp, err := c.GetSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchemaResponse(rsp)
}

// GetSearchWithResponse request returning *GetSearchResponse
func (c *ClientWithResponses) GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error) {
	rsp, err := c.GetSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// GetTeamsWithResponse request returning *GetTeamsResponse
func (c *ClientWithResponses) GetTeamsWithResponse(ctx context.Context, params *GetTeamsParams, reqEditors ...RequestEditorFn) (*GetTeamsResponse, error) {
	rsp, err := c.GetTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsResponse(rsp)
}

// GetTeamsByTeamIdWithResponse request returning *GetTeamsByTeamIdResponse
func (c *ClientWithResponses) GetTeamsByTeamIdWithResponse(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*GetTeamsByTeamIdResponse, error) {
	rsp, err := c.GetTeamsByTeamId(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsByTeamIdResponse(rsp)
}

// GetTeamsByTeamIdSelectHeroesWithResponse request returning *GetTeamsByTeamIdSelectHeroesResponse
func (c *ClientWithResponses) GetTeamsByTeamIdSelectHeroesWithResponse(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*GetTeamsByTeamIdSelectHeroesResponse, error) {
	rsp, err := c.GetTeamsByTeamIdSelectHeroes(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsByTeamIdSelectHeroesResponse(rsp)
}

// GetTeamsByTeamIdSelectMatchesWithResponse request returning *GetTeamsByTeamIdSelectMatchesResponse
func (c *ClientWithResponses) GetTeamsByTeamIdSelectMatchesWithResponse(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*GetTeamsByTeamIdSelectMatchesResponse, error) {
	rsp, err := c.GetTeamsByTeamIdSelectMatches(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsByTeamIdSelectMatchesResponse(rsp)
}

// GetTeamsByTeamIdSelectPlayersWithResponse request returning *GetTeamsByTeamIdSelectPlayersResponse
func (c *ClientWithResponses) GetTeamsByTeamIdSelectPlayersWithResponse(ctx context.Context, teamId TeamIdPathParam, reqEditors ...RequestEditorFn) (*GetTeamsByTeamIdSelectPlayersResponse, error) {
	rsp, err := c.GetTeamsByTeamIdSelectPlayers(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsByTeamIdSelectPlayersResponse(rsp)
}

// ParseGetBenchmarksResponse parses an HTTP response from a GetBenchmarksWithResponse call
func ParseGetBenchmarksResponse(rsp *http.Response) (*GetBenchmarksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBenchmarksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConstantsResponse parses an HTTP response from a GetConstantsWithResponse call
func ParseGetConstantsResponse(rsp *http.Response) (*GetConstantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConstantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConstantsByResourceResponse parses an HTTP response from a GetConstantsByResourceWithResponse call
func ParseGetConstantsByResourceResponse(rsp *http.Response) (*GetConstantsByResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConstantsByResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDistributionsResponse parses an HTTP response from a GetDistributionsWithResponse call
func ParseGetDistributionsResponse(rsp *http.Response) (*GetDistributionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDistributionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetExplorerResponse parses an HTTP response from a GetExplorerWithResponse call
func ParseGetExplorerResponse(rsp *http.Response) (*GetExplorerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetExplorerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFindMatchesResponse parses an HTTP response from a GetFindMatchesWithResponse call
func ParseGetFindMatchesResponse(rsp *http.Response) (*GetFindMatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFindMatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHeroStatsResponse parses an HTTP response from a GetHeroStatsWithResponse call
func ParseGetHeroStatsResponse(rsp *http.Response) (*GetHeroStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeroStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHeroesResponse parses an HTTP response from a GetHeroesWithResponse call
func ParseGetHeroesResponse(rsp *http.Response) (*GetHeroesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeroesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHeroesByHeroIdSelectDurationsResponse parses an HTTP response from a GetHeroesByHeroIdSelectDurationsWithResponse call
func ParseGetHeroesByHeroIdSelectDurationsResponse(rsp *http.Response) (*GetHeroesByHeroIdSelectDurationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeroesByHeroIdSelectDurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHeroesByHeroIdSelectItemPopularityResponse parses an HTTP response from a GetHeroesByHeroIdSelectItemPopularityWithResponse call
func ParseGetHeroesByHeroIdSelectItemPopularityResponse(rsp *http.Response) (*GetHeroesByHeroIdSelectItemPopularityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeroesByHeroIdSelectItemPopularityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHeroesByHeroIdSelectMatchesResponse parses an HTTP response from a GetHeroesByHeroIdSelectMatchesWithResponse call
func ParseGetHeroesByHeroIdSelectMatchesResponse(rsp *http.Response) (*GetHeroesByHeroIdSelectMatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeroesByHeroIdSelectMatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHeroesByHeroIdSelectMatchupsResponse parses an HTTP response from a GetHeroesByHeroIdSelectMatchupsWithResponse call
func ParseGetHeroesByHeroIdSelectMatchupsResponse(rsp *http.Response) (*GetHeroesByHeroIdSelectMatchupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeroesByHeroIdSelectMatchupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHeroesByHeroIdSelectPlayersResponse parses an HTTP response from a GetHeroesByHeroIdSelectPlayersWithResponse call
func ParseGetHeroesByHeroIdSelectPlayersResponse(rsp *http.Response) (*GetHeroesByHeroIdSelectPlayersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHeroesByHeroIdSelectPlayersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLeaguesResponse parses an HTTP response from a GetLeaguesWithResponse call
func ParseGetLeaguesResponse(rsp *http.Response) (*GetLeaguesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeaguesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLeaguesByLeagueIdResponse parses an HTTP response from a GetLeaguesByLeagueIdWithResponse call
func ParseGetLeaguesByLeagueIdResponse(rsp *http.Response) (*GetLeaguesByLeagueIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeaguesByLeagueIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLeaguesByLeagueIdSelectMatchesResponse parses an HTTP response from a GetLeaguesByLeagueIdSelectMatchesWithResponse call
func ParseGetLeaguesByLeagueIdSelectMatchesResponse(rsp *http.Response) (*GetLeaguesByLeagueIdSelectMatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeaguesByLeagueIdSelectMatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLeaguesByLeagueIdSelectTeamsResponse parses an HTTP response from a GetLeaguesByLeagueIdSelectTeamsWithResponse call
func ParseGetLeaguesByLeagueIdSelectTeamsResponse(rsp *http.Response) (*GetLeaguesByLeagueIdSelectTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeaguesByLeagueIdSelectTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLiveResponse parses an HTTP response from a GetLiveWithResponse call
func ParseGetLiveResponse(rsp *http.Response) (*GetLiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMatchesByMatchIdResponse parses an HTTP response from a GetMatchesByMatchIdWithResponse call
func ParseGetMatchesByMatchIdResponse(rsp *http.Response) (*GetMatchesByMatchIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMatchesByMatchIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMetadataResponse parses an HTTP response from a GetMetadataWithResponse call
func ParseGetMetadataResponse(rsp *http.Response) (*GetMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetParsedMatchesResponse parses an HTTP response from a GetParsedMatchesWithResponse call
func ParseGetParsedMatchesResponse(rsp *http.Response) (*GetParsedMatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetParsedMatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdResponse parses an HTTP response from a GetPlayersByAccountIdWithResponse call
func ParseGetPlayersByAccountIdResponse(rsp *http.Response) (*GetPlayersByAccountIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectCountsResponse parses an HTTP response from a GetPlayersByAccountIdSelectCountsWithResponse call
func ParseGetPlayersByAccountIdSelectCountsResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectCountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectCountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectHeroesResponse parses an HTTP response from a GetPlayersByAccountIdSelectHeroesWithResponse call
func ParseGetPlayersByAccountIdSelectHeroesResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectHeroesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectHeroesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdHistogramsByFieldResponse parses an HTTP response from a GetPlayersByAccountIdHistogramsByFieldWithResponse call
func ParseGetPlayersByAccountIdHistogramsByFieldResponse(rsp *http.Response) (*GetPlayersByAccountIdHistogramsByFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdHistogramsByFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectMatchesResponse parses an HTTP response from a GetPlayersByAccountIdSelectMatchesWithResponse call
func ParseGetPlayersByAccountIdSelectMatchesResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectMatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectMatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectPeersResponse parses an HTTP response from a GetPlayersByAccountIdSelectPeersWithResponse call
func ParseGetPlayersByAccountIdSelectPeersResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectPeersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectPeersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectProsResponse parses an HTTP response from a GetPlayersByAccountIdSelectProsWithResponse call
func ParseGetPlayersByAccountIdSelectProsResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectProsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectProsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectRankingsResponse parses an HTTP response from a GetPlayersByAccountIdSelectRankingsWithResponse call
func ParseGetPlayersByAccountIdSelectRankingsResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectRankingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectRankingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectRatingsResponse parses an HTTP response from a GetPlayersByAccountIdSelectRatingsWithResponse call
func ParseGetPlayersByAccountIdSelectRatingsResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectRatingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectRatingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectRecentMatchesResponse parses an HTTP response from a GetPlayersByAccountIdSelectRecentMatchesWithResponse call
func ParseGetPlayersByAccountIdSelectRecentMatchesResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectRecentMatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectRecentMatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostPlayersAccountIdRefreshResponse parses an HTTP response from a PostPlayersAccountIdRefreshWithResponse call
func ParsePostPlayersAccountIdRefreshResponse(rsp *http.Response) (*PostPlayersAccountIdRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPlayersAccountIdRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectTotalsResponse parses an HTTP response from a GetPlayersByAccountIdSelectTotalsWithResponse call
func ParseGetPlayersByAccountIdSelectTotalsResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectTotalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectTotalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectWardmapResponse parses an HTTP response from a GetPlayersByAccountIdSelectWardmapWithResponse call
func ParseGetPlayersByAccountIdSelectWardmapResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectWardmapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectWardmapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectWlResponse parses an HTTP response from a GetPlayersByAccountIdSelectWlWithResponse call
func ParseGetPlayersByAccountIdSelectWlResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectWlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectWlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByAccountIdSelectWordcloudResponse parses an HTTP response from a GetPlayersByAccountIdSelectWordcloudWithResponse call
func ParseGetPlayersByAccountIdSelectWordcloudResponse(rsp *http.Response) (*GetPlayersByAccountIdSelectWordcloudResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByAccountIdSelectWordcloudResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlayersByRankResponse parses an HTTP response from a GetPlayersByRankWithResponse call
func ParseGetPlayersByRankResponse(rsp *http.Response) (*GetPlayersByRankResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayersByRankResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProMatchesResponse parses an HTTP response from a GetProMatchesWithResponse call
func ParseGetProMatchesResponse(rsp *http.Response) (*GetProMatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProMatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProPlayersResponse parses an HTTP response from a GetProPlayersWithResponse call
func ParseGetProPlayersResponse(rsp *http.Response) (*GetProPlayersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProPlayersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPublicMatchesResponse parses an HTTP response from a GetPublicMatchesWithResponse call
func ParseGetPublicMatchesResponse(rsp *http.Response) (*GetPublicMatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublicMatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRankingsResponse parses an HTTP response from a GetRankingsWithResponse call
func ParseGetRankingsResponse(rsp *http.Response) (*GetRankingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRecordsByFieldResponse parses an HTTP response from a GetRecordsByFieldWithResponse call
func ParseGetRecordsByFieldResponse(rsp *http.Response) (*GetRecordsByFieldResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecordsByFieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReplaysResponse parses an HTTP response from a GetReplaysWithResponse call
func ParseGetReplaysResponse(rsp *http.Response) (*GetReplaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReplaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRequestByJobIdResponse parses an HTTP response from a GetRequestByJobIdWithResponse call
func ParseGetRequestByJobIdResponse(rsp *http.Response) (*GetRequestByJobIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestByJobIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRequestMatchIdResponse parses an HTTP response from a PostRequestMatchIdWithResponse call
func ParsePostRequestMatchIdResponse(rsp *http.Response) (*PostRequestMatchIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRequestMatchIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetScenariosItemTimingsResponse parses an HTTP response from a GetScenariosItemTimingsWithResponse call
func ParseGetScenariosItemTimingsResponse(rsp *http.Response) (*GetScenariosItemTimingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScenariosItemTimingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetScenariosLaneRolesResponse parses an HTTP response from a GetScenariosLaneRolesWithResponse call
func ParseGetScenariosLaneRolesResponse(rsp *http.Response) (*GetScenariosLaneRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScenariosLaneRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetScenariosMiscResponse parses an HTTP response from a GetScenariosMiscWithResponse call
func ParseGetScenariosMiscResponse(rsp *http.Response) (*GetScenariosMiscResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScenariosMiscResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSchemaResponse parses an HTTP response from a GetSchemaWithResponse call
func ParseGetSchemaResponse(rsp *http.Response) (*GetSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSearchResponse parses an HTTP response from a GetSearchWithResponse call
func ParseGetSearchResponse(rsp *http.Response) (*GetSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsResponse parses an HTTP response from a GetTeamsWithResponse call
func ParseGetTeamsResponse(rsp *http.Response) (*GetTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsByTeamIdResponse parses an HTTP response from a GetTeamsByTeamIdWithResponse call
func ParseGetTeamsByTeamIdResponse(rsp *http.Response) (*GetTeamsByTeamIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsByTeamIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsByTeamIdSelectHeroesResponse parses an HTTP response from a GetTeamsByTeamIdSelectHeroesWithResponse call
func ParseGetTeamsByTeamIdSelectHeroesResponse(rsp *http.Response) (*GetTeamsByTeamIdSelectHeroesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsByTeamIdSelectHeroesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsByTeamIdSelectMatchesResponse parses an HTTP response from a GetTeamsByTeamIdSelectMatchesWithResponse call
func ParseGetTeamsByTeamIdSelectMatchesResponse(rsp *http.Response) (*GetTeamsByTeamIdSelectMatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsByTeamIdSelectMatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsByTeamIdSelectPlayersResponse parses an HTTP response from a GetTeamsByTeamIdSelectPlayersWithResponse call
func ParseGetTeamsByTeamIdSelectPlayersResponse(rsp *http.Response) (*GetTeamsByTeamIdSelectPlayersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsByTeamIdSelectPlayersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
